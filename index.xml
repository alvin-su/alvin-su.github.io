<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alvinsu Blog</title>
    <link>https://alvin-su.github.io/</link>
    <description>Recent content on Alvinsu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 27 May 2022 09:26:30 +0800</lastBuildDate><atom:link href="https://alvin-su.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么是领域驱动设计</title>
      <link>https://alvin-su.github.io/post/%E4%BB%80%E4%B9%88%E6%98%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 27 May 2022 09:26:30 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/%E4%BB%80%E4%B9%88%E6%98%AF%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>什么是领域驱动设计2004 年埃里克·埃文斯（Eric Evans）发表了《领域驱动设计》（Domain-Driven Design –Tackling Complexity in the Heart of Software）这本书，从此领域驱动设计（Domain Driven Design，简称 DDD）诞生。DDD 核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性。 领域驱动设计是一种通过将实现连接到持续进化的模型来满足复杂需求的软件开发方法。
DDD设计的前提是：
 把项目的主要重点放在核心领域 把复杂的设计放在有界域（bounded context）的模型上 发起一个创造性的合作之间的技术和域界专家以迭代地完善的概念模式，解决特定领域的问题。  领域驱动设计是一种由域模型来驱动着系统设计的思想，不是通过存储数据词典(DB表字段、ES Mapper字段等等)来驱动系统设计。领域模型是对业务模型的抽象，DDD是把业务模型翻译成系统架构设计的一种方式。
微服务与DDD的关系DDD 提出后在软件开发领域一直都是“雷声大，雨点小”，直到 Martin Fowler 提出微服务架构，DDD 才真正迎来了自己的时代。
有些熟悉 DDD 设计方法的软件工程师在进行微服务设计时，发现可以利用 DDD 设计方法来建立领域模型，划分领域边界，再根据这些领域边界从业务视角来划分微服务边界。而按照 DDD 方法设计出的微服务的业务和应用边界都非常合理，可以很好地实现微服务内部和外部的“高内聚、低耦合”。于是越来越多的人开始把 DDD 作为微服务设计的指导思想。
DDD 是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂性，并围绕业务概念构建领域模型来控制业务的复杂性，以解决软件难以理解，难以演进的问题。DDD 不是架构，而是一种架构设计方法论，它通过边界划分将复杂业务领域简单化，帮我们设计出清晰的领域和应用边界，可以很容易地实现架构演进。
DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。两者都强调从业务出发，其核心要义是强调根据业务发展，合理划分领域边界，持续调整现有架构，优化现有代码，以保持架构和代码的生命力，也就是我们常说的演进式架构。
DDD 主要关注：从业务领域视角划分领域边界，构建通用语言进行高效沟通，通过业务抽象，建立领域模型，维持业务和代码的逻辑一致性。
微服务主要关注：运行时的进程间通信、容错和故障隔离，实现去中心化数据管理和去中心化服务治理，关注微服务的独立开发、测试、构建和部署。 .</description>
    </item>
    
    <item>
      <title>利用Hugo搭建个人博客站点</title>
      <link>https://alvin-su.github.io/post/hugo-site/</link>
      <pubDate>Thu, 26 May 2022 21:30:55 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/hugo-site/</guid>
      <description>什么是HugoHugo 是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署,可以快速方便的创建自己的博客。
安装HugoHugo 因为是Go语言实现的 所以支持 Windows\Linux\MacOS 系统。因为日常办公只要是使用的Windows,所以这里只介绍Windows环境的安装。
在github上下载Hugo的最新版本，地址：https://github.com/gohugoio/hugo/releases 如下图：
下载下来后进行解压，进入目录只有一个hugo.exe 可执行文件，在系统环境变量path中，配置该exe的路径: 配置好环境变量后，就可以在powershell 中使用 hugo 命令，利用 hugo version 命令查看下hugo 的版本
创建博客站点可以方便的利用 hugo new site myblog 命令创建一个名为 “myblog” 的博客。
我们进入到myblog里面，可以看到如下内容:
添加博客主题可以在 https://themes.gohugo.io/选择自己喜欢的主题进行下载，比如选择 m10c 主题，可以通过下面的命令进行下载： git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
输入命令 hugo server -t m10c &amp;ndash;buildDrafts 启动站点
创建博客文章通过命令 hugo new post/myfirst.md 创建一个 myfirst.md 的文件。</description>
    </item>
    
  </channel>
</rss>
