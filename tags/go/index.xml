<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Alvinsu Blog</title>
    <link>https://alvin-su.github.io/tags/go/</link>
    <description>Recent content in Go on Alvinsu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jun 2022 09:15:49 +0800</lastBuildDate><atom:link href="https://alvin-su.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go结构体</title>
      <link>https://alvin-su.github.io/post/go%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Mon, 20 Jun 2022 09:15:49 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/go%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>Go结构体数组、切片以及映射（字典）只能保存一种数据类型。如果需要一个保存多种数据类型的结构，这个时候就需要用到 struct 结构体。
什么是结构体一个struct是一个由其他不同的多种值构造出来的。一个struct可以保存string、int、float64等多种类型。使用struct关键字来声明一个struct，后面跟着{}花括号。在括号中可以定义一个或多个字段，每一个字段定义在一个单独的行中，由字段名称、后面跟着字段需要保存的值的类型组成。
struct {  field1 string,  field2 int } 可以使用一个struct类型来作为定义的变量的类型。下面的代码定义了一个名为myStruct的变量，它保存float64类型的number字段、string类型的word字段和bool类型的toggle字段。
var myStruct struct {  number float64  word string  toggle bool } fmt.Printf(&amp;#34;%#v\n&amp;#34;,myStruct) 使用Printf函数中的%#v将myStruct变量作为字面量打印。
定义类型和struct上面定义一个struct类型的变量是比较麻烦的，如果我们需要定义多个myStruct变量，那么就需要重复整个struct声明，如下：
var myStruct1 struct {  number float64  word string  toggle bool }  var myStruct2 struct {  number float64  word string  toggle bool } 为了解决上面的问题，可以创建自己的类型。类型定义允许你创建新的类型，可以基于基础类型来创建新的定义类型。我们可以使用任何基础类型来创建自己的类型，比如int、string等。但是我们现在专注于struct作为基础类型。</description>
    </item>
    
    <item>
      <title>调用函数</title>
      <link>https://alvin-su.github.io/post/%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 04 Jun 2022 22:32:06 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>调用函数本章学习创建自定义函数，包括声明参数和返回单个值、多个值。我们还将学习指针，以便进行高效的内存函数调用。
一些重复的代码我们需要计算两面墙的面积，看下面的代码：
func main(){  var width,height,area float64  //第一面墙的面积计算  width = 4.2  height = 3.0  area = width*height  fmt.Println(area/10,&amp;#34;liters needes&amp;#34;)  //第二面墙的面积计算  width=5.2  heigth=3.5  area=width*height  fmt.Println(area/10,&amp;#34;liters needes&amp;#34;) } 上面的代码存在两个问题：
 计算结果有异常精确的浮点值，我们只需要精确到两位小数。 有相当多的重复代码，如果需要计算十面墙的面积，那么代码量很可观。  下面我们就解决上面代码中存在的这两个问题，先看浮点数值得问题。
使用 Printf 和 Sprintf 格式化代码Go的 fmt 包提供了 Printf函数。Printf代表 带格式的打印 。它接受一个字符串并将一个或多个值插入其中，以特定的方式进行格式化。然后打印结果字符串: fmt.Printf(&amp;quot;About one-third:%0.2f\n&amp;quot;,1.0/3.0)。
Sprintf函数也是fmt包的一部分，它的工作方式和Printf函数类似，只是它是返回格式化后的字符串而不是打印它。 resultString := fmt.</description>
    </item>
    
    <item>
      <title>Go-条件和循环</title>
      <link>https://alvin-su.github.io/post/go_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 29 May 2022 09:51:35 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/go_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%BE%AA%E7%8E%AF/</guid>
      <description>调用方法在 Go中，可以定义方法，方法其实是与特定 类型的值 关联的函数。看下面的代码，我们将调用 time 包中的方法。
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;time&amp;#34; )  func main(){  var now time.Time = time.Now() //time.Now方法返回代表当前日期和时间的 time.Time值  var year int = now.Year() //返回年份的 Year方法  fmt.Println(year) } 上面看到调用方法的语法看起来很像调用不同包中的函数的语法，两者的区别是，函数属于一个包，而方法属于一个单独的值。这个值出现在圆点的左边。
下面使用 strings包中的Replacer类型中的Replace方法，替换字符串中的指定的要替换的字符串。
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;strings&amp;#34;  &amp;#34;strings&amp;#34; )  func main(){  broken:=&amp;#34;G# r#cks&amp;#34;  replacer:=strings.NewReplacer(&amp;#34;#&amp;#34;,&amp;#34;o&amp;#34;)  fixed:=replacer.Replace(broken)  fmt.Println(fixed) } 获取用户输入的分数在控制台中获取用户输入的分数并打印出来。</description>
    </item>
    
    <item>
      <title>开始学习Go--语法基础</title>
      <link>https://alvin-su.github.io/post/go_begin/</link>
      <pubDate>Fri, 27 May 2022 21:18:02 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/go_begin/</guid>
      <description>语法基础Go 是一种注重简单性和速度的编程语言。Go 语言的目标：
 快速编译 不太笨重的代码（语法简单） 自动释放未使用的内存（垃圾回收） 易于编写同时执行多个操作的软件（并发\协程） 很好的支持多核处理器  Go 程序代码结构package main  import &amp;#34;fmt&amp;#34;  func main(){  fmt.Println(&amp;#34;Hello,Go!&amp;#34;) } 上面是典型的Go文件代码布局，主要分三部分：
 package main 子句，表示该代码文件中的所有其余代码都属于 main 包。 import &amp;quot;fmt&amp;quot; 子句，表示我们导入了 fmt 包，可以使用里面公开的文本格式代码。 实际代码 每个Go文件的最后一部分都是实际代码，它通常被分割成一个或多个 function(函数)。main 包和main函数是 Go 程序的入口点。  调用函数调用函数的格式是：包名.函数名，比如 fmt.Println(),一个包中的函数可被其它包调用，前提是该函数是大写字母开头，表示是可导出的。
在代码中要使用其它包中的函数，首先要导入其它包，通过impport 子句。
import (  &amp;#34;fmt&amp;#34;  &amp;#34;math&amp;#34; ) 上面这种格式表示导入了两个包。
字符串字符串是一系列字节，通常表示文本字符，通过字面量定义字符：双引号之间的文本，Go将把他们视为字符串,&amp;quot;Hello,Go&amp;quot;。</description>
    </item>
    
  </channel>
</rss>
