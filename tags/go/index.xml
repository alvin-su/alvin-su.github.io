<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Alvinsu Blog</title>
    <link>https://alvin-su.github.io/tags/go/</link>
    <description>Recent content in Go on Alvinsu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 May 2022 09:51:35 +0800</lastBuildDate><atom:link href="https://alvin-su.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go-条件和循环</title>
      <link>https://alvin-su.github.io/post/go_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 29 May 2022 09:51:35 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/go_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%BE%AA%E7%8E%AF/</guid>
      <description>调用方法在 Go中，可以定义方法，方法其实是与特定 类型的值 关联的函数。看下面的代码，我们将调用 time 包中的方法。
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;time&amp;#34; )  func main(){  var now time.Time = time.Now() //time.Now方法返回代表当前日期和时间的 time.Time值  var year int = now.Year() //返回年份的 Year方法  fmt.Println(year) } 上面看到调用方法的语法看起来很像调用不同包中的函数的语法，两者的区别是，函数属于一个包，而方法属于一个单独的值。这个值出现在圆点的左边。
下面使用 strings包中的Replacer类型中的Replace方法，替换字符串中的指定的要替换的字符串。
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;strings&amp;#34;  &amp;#34;strings&amp;#34; )  func main(){  broken:=&amp;#34;G# r#cks&amp;#34;  replacer:=strings.NewReplacer(&amp;#34;#&amp;#34;,&amp;#34;o&amp;#34;)  fixed:=replacer.Replace(broken)  fmt.Println(fixed) } 获取用户输入的分数在控制台中获取用户输入的分数并打印出来。</description>
    </item>
    
    <item>
      <title>开始学习Go--语法基础</title>
      <link>https://alvin-su.github.io/post/go_begin/</link>
      <pubDate>Fri, 27 May 2022 21:18:02 +0800</pubDate>
      
      <guid>https://alvin-su.github.io/post/go_begin/</guid>
      <description>语法基础Go 是一种注重简单性和速度的编程语言。Go 语言的目标：
 快速编译 不太笨重的代码（语法简单） 自动释放未使用的内存（垃圾回收） 易于编写同时执行多个操作的软件（并发\协程） 很好的支持多核处理器  Go 程序代码结构package main  import &amp;#34;fmt&amp;#34;  func main(){  fmt.Println(&amp;#34;Hello,Go!&amp;#34;) } 上面是典型的Go文件代码布局，主要分三部分：
 package main 子句，表示该代码文件中的所有其余代码都属于 main 包。 import &amp;quot;fmt&amp;quot; 子句，表示我们导入了 fmt 包，可以使用里面公开的文本格式代码。 实际代码 每个Go文件的最后一部分都是实际代码，它通常被分割成一个或多个 function(函数)。main 包和main函数是 Go 程序的入口点。  调用函数调用函数的格式是：包名.函数名，比如 fmt.Println(),一个包中的函数可被其它包调用，前提是该函数是大写字母开头，表示是可导出的。
在代码中要使用其它包中的函数，首先要导入其它包，通过impport 子句。
import (  &amp;#34;fmt&amp;#34;  &amp;#34;math&amp;#34; ) 上面这种格式表示导入了两个包。
字符串字符串是一系列字节，通常表示文本字符，通过字面量定义字符：双引号之间的文本，Go将把他们视为字符串,&amp;quot;Hello,Go&amp;quot;。</description>
    </item>
    
  </channel>
</rss>
